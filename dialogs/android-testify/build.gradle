import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'dev.testify'
}

ext {
    SCREENSHOT_ANNOTATION = "screenshotAnnotation"
    RECORD_MODE_GMD = "recordModeGmd"
    USE_TEST_STORAGE = "useTestStorage"
}

String filterAnnotation() {
    if (project.hasProperty(SCREENSHOT_ANNOTATION)) {
        return project.property(SCREENSHOT_ANNOTATION)
    } else {
        return null // fallbacks to default annotation
    }
}

android {
    namespace 'com.example.road.to.effective.snapshot.testing.dialogs.android_testify'
    compileSdk 36

    defaultConfig {
        testApplicationId "com.example.road.to.effective.snapshot.testing"
        minSdk 23
        targetSdk 36

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments = [
                // for Gradle Managed Devices
                useTestStorageService: "true"
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            pseudoLocalesEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        if (project.hasProperty("useOrchestrator")) {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }
        animationsDisabled = true

        // Warning: shards with gradle managed devices are not supported for now
        managedDevices {
            devices {
                // api 30/31 causes problems with Dialogs
                pixel3api32(ManagedVirtualDevice) {
                    device = "Pixel 3"
                    apiLevel = 32
                    systemImageSource = "aosp" // do not use atd images for screenshot testing
                }
            }
        }
    }
}

testify {
    moduleName = ":dialogs:android-testify"
    applicationPackageId = 'com.example.road.to.effective.snapshot.testing'
    testPackageId = 'com.example.road.to.effective.snapshot.testing'
    screenshotAnnotation = filterAnnotation()
    // for Gradle Managed Devices
    recordMode = project.hasProperty(RECORD_MODE_GMD)
    useTestStorage = project.hasProperty(USE_TEST_STORAGE)
}

// Create task to move screenshots generated via Gradle Managed Devices to the right location
// before verifying them
def devices = project.hasProperty("devices") ? project.devices : "pixel3api32"

tasks.register('copyScreenshots', Copy) {
    from "build/outputs/managed_device_android_test_additional_output/debug/${devices}/images"
    into "src/androidTest/assets"
}

dependencies {
    implementation project(':dialogs')
    implementation project(':testannotations')

    androidTestImplementation 'androidx.test:rules:1.7.0'

    androidTestImplementation 'com.github.sergio-sastre.AndroidUiTestingUtils:utils:2.7.0'
    androidTestImplementation 'com.github.sergio-sastre.AndroidUiTestingUtils:android-testify:2.7.0'

    androidTestImplementation 'com.google.testparameterinjector:test-parameter-injector:1.19'

    androidTestUtil 'androidx.test:orchestrator:1.6.1'

    // for Gradle Managed Devices
    androidTestUtil('androidx.test.services:test-services:1.6.0')
}