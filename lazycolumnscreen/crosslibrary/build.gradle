import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.0'
}

ext {
    SCREENSHOT_LIBRARY = "screenshotLibrary"

    SHOT = "shot"
    DROPSHOTS = "dropshots"
    ANDROID_TESTIFY = "android-testify"
    PAPARAZZI = "paparazzi"
    ROBORAZZI = "roborazzi"
}

ext {
    ANDROID_TESTIFY_RECORD_MODE_GMD = "recordModeGmd"
    ANDROID_TESTIFY_USE_TEST_STORAGE = "useTestStorage"
}

String screenshotLibraryName() {
    if (project.hasProperty(SCREENSHOT_LIBRARY)) {
        return project.property(SCREENSHOT_LIBRARY)
    } else {
        return ""
    }
}

android {
    namespace 'com.example.road.to.effective.snapshot.testing.lazycolumnscreen.crosslibrary'
    compileSdk 35

    defaultConfig {
        testApplicationId "com.example.road.to.effective.snapshot.testing"
        minSdk 23
        targetSdk 35

        // make gradle constants available in Tests via BuildConfig to make changes consistent
        // among build and test files
        buildConfigField "String", "SCREENSHOT_LIBRARY", "\"${SCREENSHOT_LIBRARY}\""
        buildConfigField "String", "SHOT", "\"${SHOT}\""
        buildConfigField "String", "DROPSHOTS", "\"${DROPSHOTS}\""
        buildConfigField "String", "ANDROID_TESTIFY", "\"${ANDROID_TESTIFY}\""
        buildConfigField "String", "PAPARAZZI", "\"${PAPARAZZI}\""
        buildConfigField "String", "ROBORAZZI", "\"${ROBORAZZI}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            pseudoLocalesEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.14'
    }

    testOptions {
        // Warning: android-testify does not support shards with Gradle Managed Devices for now
        managedDevices {
            devices {
                pixel3api30(ManagedVirtualDevice) {
                    device = "Pixel 3"
                    apiLevel = 30
                    systemImageSource = "aosp" // do not use atd images for screenshot testing
                }
            }
        }
    }

    // required for shared tests in this module: on-device + JVM screenshot tests
    sourceSets {
        test {
            java.srcDir 'src/sharedTest/java'
        }
        androidTest {
            java.srcDir 'src/sharedTest/java'
        }
    }
}

// Apply screenshot library plugins conditionally.
// Each plugin is configured in its own gradle file
//
// WARNING: Shot plugin does not work properly if Dropshots plugin is also applied.
// Thus, apply screenshot library plugins based on the argument passed via command line
switch (screenshotLibraryName()) {
    case PAPARAZZI:
        apply from: 'paparazzi.gradle'
        break
    case ROBORAZZI:
        apply from: 'roborazzi.gradle'
        break
    case SHOT:
        apply from: 'shot.gradle'
        break
    case DROPSHOTS:
        apply from: 'dropshots.gradle'
        break
    case ANDROID_TESTIFY:
        apply from: 'android-testify.gradle'
        break
}

// Android-Testify:
// Create task to move screenshots generated via Gradle Managed Devices to the right location
// before verifying them
def devices = project.hasProperty("devices") ? project.devices : "pixel3api30"

tasks.register('copyScreenshots', Copy) {
    from "build/outputs/managed_device_android_test_additional_output/debug/${devices}/images"
    into "src/androidTest/assets"
}

dependencies {
    implementation project(':lazycolumnscreen')
    implementation project(':testannotations')

    // Jetpack Compose
    debugImplementation platform('androidx.compose:compose-bom:2025.02.00')
    debugImplementation "androidx.compose.material:material"

    // screenshot libs
    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:utils:2.6.0')

    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:shot:2.6.0')

    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:dropshots:2.6.0')

    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:android-testify:2.6.0')

    testImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:robolectric:2.6.0')
    testImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:roborazzi:2.6.0')
    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:mapper-roborazzi:2.6.0')

    testImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:paparazzi:2.6.0')
    debugImplementation('com.github.sergio-sastre.AndroidUiTestingUtils:mapper-paparazzi:2.6.0')

    // for Gradle Managed Devices
    androidTestUtil('androidx.test.services:test-services:1.5.0')
}
